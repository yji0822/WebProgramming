-- student review
DROP TABLE STUDENT;
DROP TABLE MAJOR;
-- CREATE TABLE
CREATE TABLE MAJOR(
    mNO NUMBER(2),
    mNAME VARCHAR2(50) NOT NULL,
    PRIMARY KEY(mNO));
CREATE TABLE STUDENT(
    sNO VARCHAR2(7),
    sNAME VARCHAR2(50) NOT NULL,
    mNO NUMBER(2) NOT NULL,
    SCORE NUMBER(3) DEFAULT 0,
    sEXPEL NUMBER(1) DEFAULT 0,
    PRIMARY KEY(sNO),
    CHECK(SCORE>=0 AND SCORE<=100),
    CHECK(sEXPEL=0 OR sEXPEL=1),
    FOREIGN KEY(mNO) REFERENCES MAJOR(mNO));
DROP SEQUENCE STUDENT_SEQ;
CREATE SEQUENCE STUDENT_SEQ MAXVALUE 999 NOCACHE NOCYCLE;
-- 더미 데이터 입력 : 학과정보
INSERT INTO MAJOR VALUES (1, '컴퓨터공학');
INSERT INTO MAJOR VALUES (2, '경영경제학');
INSERT INTO MAJOR VALUES (3, '원예산업학');
INSERT INTO MAJOR VALUES (4, '신문방송학');
INSERT INTO MAJOR VALUES (5, '국어국문학');
SELECT * FROM MAJOR;
-- 학번 생성하기
SELECT TO_CHAR(SYSDATE, 'YYYY')||TRIM(TO_CHAR(STUDENT_SEQ.NEXTVAL, '000')) FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY')||SUBSTR(TO_CHAR(STUDENT_SEQ.NEXTVAL, '000'), 2, 3) FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY')||LPAD(STUDENT_SEQ.NEXTVAL, 3, '0') FROM DUAL;

SELECT EXTRACT(YEAR FROM SYSDATE)||TRIM(TO_CHAR(STUDENT_SEQ.NEXTVAL, '000')) FROM DUAL;
SELECT EXTRACT(YEAR FROM SYSDATE)||SUBSTR(TO_CHAR(STUDENT_SEQ.NEXTVAL, '000'), 2, 3) FROM DUAL;
SELECT EXTRACT(YEAR FROM SYSDATE)||LPAD(STUDENT_SEQ.NEXTVAL, 3, '0') FROM DUAL;

DROP SEQUENCE STUDENT_SEQ;
CREATE SEQUENCE STUDENT_SEQ MAXVALUE 999 NOCACHE NOCYCLE;

-- 더미 데이터 : 학생 정보
INSERT INTO STUDENT (SNO, SNAME, MNO, SCORE)
    VALUES (EXTRACT(YEAR FROM SYSDATE)||LPAD(STUDENT_SEQ.NEXTVAL, 3, '0'), '홍길동',
            (SELECT MNO FROM MAJOR WHERE MNAME='컴퓨터공학'), 100);
INSERT INTO STUDENT (SNO, SNAME, MNO, SCORE)
    VALUES (EXTRACT(YEAR FROM SYSDATE)||LPAD(STUDENT_SEQ.NEXTVAL, 3, '0'), '홍길동',
            (SELECT MNO FROM MAJOR WHERE MNAME='컴퓨터공학'), 90);
COMMIT;

SELECT * FROM STUDENT;
SELECT * FROM MAJOR;

COMMIT;

-- 0. 전공이름들 콤보박스에 추가 : public Vector<String> getMNamelist()
-- MNAME
SELECT MNAME FROM MAJOR;

-- 1.학번입력 : 학번 입력 후 학번검색 버튼 public StudnetDto sNogetStudent(String sno)
-- SNO, SNAME, MNAME, SCORE

SELECT SNO, SNAME, MNAME, SCORE
    FROM STUDENT S, MAJOR M
    WHERE S.MNO = M.MNO
        AND SNO = 2022001;

-- 2. 이름검색 이름을 입력받고 이름 검색
-- SNO, SNAME, MNAME, SCORE

SELECT SNO, SNAME, MNAME, SCORE 
    FROM STUDENT S, MAJOR M
    WHERE S.MNO = M.MNO
    AND SNAME = '홍길동';

-- 3. 전공검색 : 전공콤보박스에서 선택한 후에 전공검색 버튼
-- 등수, 이름, 학과명, 점수
-- 서브쿼리
SELECT SNAME||'('||SNO||')' SNAME, MNAME, SCORE FROM STUDENT S, MAJOR M 
    WHERE S.MNO = M.MNO AND MNAME = '컴퓨터공학' ORDER BY SCORE DESC;
-- 메인쿼리 (등수출력)
SELECT ROWNUM||'등' RANK, SNAME, MNAME, SCORE 
    FROM(SELECT SNAME||'('||SNO||')' SNAME, MNAME||'('||M.MNO||')' MNAME, SCORE FROM STUDENT S, MAJOR M 
    WHERE S.MNO = M.MNO AND MNAME = '컴퓨터공학' ORDER BY SCORE DESC);

-- 4. 학생입력 : 이름, 전공, 점수 입력 / 성공 시 입력 성공, 실패시 실패 추출
-- public int insertStudent(StudentDto dto)
-- INSERT SNAME, MNAME, SCORE

INSERT INTO STUDENT (SNO, SNAME, MNO, SCORE)
    VALUES (EXTRACT(YEAR FROM SYSDATE)||LPAD(STUDENT_SEQ.NEXTVAL, 3, '0'), '박길동',
            (SELECT MNO FROM MAJOR WHERE MNAME = '컴퓨터공학'), 99);

SELECT * FROM STUDENT;

-- 5. 학생수정 : 학번을 받아서 정보 수정
UPDATE STUDENT SET SNAME = '박길동',
                    MNO = (SELECT MNO FROM MAJOR WHERE MNAME = '컴퓨터공학'),
                    SCORE = 98
                WHERE SNO = 2022004;

COMMIT;

-- 6. 학생출력 : 제적자는 제외한 후에 출력
-- 등수, 이름(학번), 학과명(학과번호), 점수
-- 서브쿼리
SELECT SNAME||'('||SNO||')' SNAME, MNAME||'('||S.MNO||')' MNAME, SCORE
    FROM STUDENT S, MAJOR M WHERE S.MNO = M.MNO ORDER BY SCORE DESC;
-- 메인쿼리
SELECT ROWNUM||'등' RANK, A.* 
    FROM (SELECT SNAME||'('||SNO||')' SNAME, MNAME||'('||S.MNO||')' MNAME, SCORE
    FROM STUDENT S, MAJOR M WHERE S.MNO = M.MNO ORDER BY SCORE DESC) A;

SELECT * FROM STUDENT;

-- 7. 제적자 출력 버튼 : 학번을 받은 후 제적처리
SELECT SNAME||'('||SNO||')' SNAME, MNAME||'('||S.MNO||')' MNAME, SCORE
    FROM STUDENT S, MAJOR M 
    WHERE S.MNO = M.MNO
    AND SEXPEL = 1;


-- 8. 제적처리
UPDATE STUDENT SET SEXPEL = 1 WHERE SNO = 2022001;

SELECT * FROM STUDENT;


